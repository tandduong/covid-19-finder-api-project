{"version":3,"sources":["component/About.js","component/Home.js","serviceWorker.js","index.js"],"names":["About","id","className","href","Home","useState","latest","setLatest","results","setResults","searchforCountry","setSearchForCountry","darkTheme","setDarkTheme","useEffect","axios","all","get","then","resArr","data","catch","err","console","log","lastUpdated","Date","parseInt","updated","toDateString","filterCountries","filter","item","country","includes","countriesLocation","map","index","lat","countryInfo","lng","long","style","color","backgroundColor","height","width","textAlign","borderRadius","alt","src","flag","cases","countriesInfected","Card","key","bg","text","Img","variant","Body","Title","Text","deaths","recovered","todayCases","todayDeaths","active","Navbar","collapseOnSelect","expand","fixed","Brand","Toggle","aria-controls","Collapse","Nav","Link","target","NavDropdown","title","Item","CardDeck","Container","Row","Col","border","Footer","icons","onChange","Form","Group","controlId","Control","type","placeholder","e","value","CardColumns","bootstrapURLKeys","defaultCenter","defaultZoom","class","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.6bccecc3.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nfunction About() {\n  \n\n    return(\n        <div id=\"about\">\n            \n\n            <div>\n                <div className=\"about\">\n                    <h1>Tan D. Duong</h1>\n                    <h3>Towson University</h3>\n                    <h3>Front-End Developer</h3>\n                    <p>tanduong1912@gmail.com</p>\n                    <p>(443)808-7475</p>\n                    <a href=\"https://tandduong.com\">Official Website</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default About;","import React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport CardColumns from 'react-bootstrap/CardColumns';\nimport Container from 'react-bootstrap/Container'\nimport {Row, Col} from 'react-bootstrap'\nimport '../App.css';\nimport axios from 'axios';\nimport Form from 'react-bootstrap/Form';\nimport GoogleMapReact from 'google-map-react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport { Nav, NavDropdown } from 'react-bootstrap';\nimport Toggle from 'react-toggle';\nimport About from './About';\n\nfunction Home() {\n  const [latest, setLatest] = useState(\"\");\n  const [results, setResults] = useState([]);\n  const [searchforCountry, setSearchForCountry] = useState(\"\");\nconst [darkTheme, setDarkTheme] = useState(false);    \n\n  useEffect(() => {\n    axios\n      .all([\n        axios.get(\"https://corona.lmao.ninja/v2/all\"),\n        axios.get(\"https://corona.lmao.ninja/v2/countries\")\n      ])\n      .then(resArr => {\n        setLatest(resArr[0].data);\n        setResults(resArr[1].data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const date = new Date(parseInt(latest.updated));\n  const lastUpdated = date.toDateString();\n\n  const filterCountries = results.filter(item => {\n    return searchforCountry !== \"\"\n      ? item.country.includes(searchforCountry)\n      : item;\n  });\n\n  const countriesLocation = results.map((data, index) => {\n    return (\n      <div\n        lat={data.countryInfo.lat}\n        lng={data.countryInfo.long}\n        style={{\n          color: \"red\",\n          backgroundColor: \"#FFF\",\n          height: \"25px\",\n          width: \"35px\",\n          textAlign: \"center\",\n          borderRadius: \"10px\",\n        }}\n      >\n        <img alt=\"flag\" height=\"10px\" src={data.countryInfo.flag} />\n        <br />\n        {data.cases}\n      </div>\n    );\n  });\n    \n    const handleDarkChange = () => {\n        setDarkTheme(!darkTheme);\n    };\n  \n  const countriesInfected = filterCountries.map((data, index) => {\n    return(\n      <Card \n        key={index}\n        bg={darkTheme? \"dark\" : \"light\"} \n        text={darkTheme? \"light\" : \"dark\"}  \n        className=\"text-center\"\n      >\n        <Card.Img variant=\"top\" src={data.countryInfo.flag} />\n        <Card.Body>\n          <Card.Title>{data.country}</Card.Title>\n          <Card.Text>Cases {data.cases}</Card.Text>\n          <Card.Text>Deaths {data.deaths}</Card.Text>\n          <Card.Text>Recovered {data.recovered}</Card.Text>\n          <Card.Text>Today Cases {data.todayCases}</Card.Text>\n          <Card.Text>Today Deaths {data.todayDeaths}</Card.Text>\n          <Card.Text>Active {data.active}</Card.Text>\n        </Card.Body>\n      </Card>\n    );\n  });\n\n  return (\n    <div id=\"nav\" style={{backgroundColor: darkTheme ? \"black\" : \"white\", color: darkTheme ? \"white\" : \"black\"}}>\n      <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" fixed=\"top\">\n        <Navbar.Brand href=\"#home\">COVID-19 Tracker</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"https://www.who.int/emergencies/diseases/novel-coronavirus-2019/media-resources/news\">WHO News</Nav.Link>\n            <Nav.Link href=\"https://tandduong.github.io/new-portfolio-tan/\" target=\"_blank\">See Portfolio</Nav.Link>\n            <Nav.Link href=\"#about\">About</Nav.Link>\n            <NavDropdown title=\"By Tan D. Duong\" id=\"collasible-nav-dropdown\">\n              <NavDropdown.Item href=\"#search\">Search</NavDropdown.Item>\n              <NavDropdown.Item href=\"#map\">See Map</NavDropdown.Item>\n            </NavDropdown>\n            <Nav.Link href=\"https://tandduong.com/contact-me/\" target=\"_blank\">Contact In My Official Website</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n          </Navbar>\n          \n          \n\n    <CardDeck style={{color: darkTheme ? \"black\" : \"black\"}} className=\"carddeck\">\n      <Container>\n        <Row>\n          <Col >\n        <Card border=\"warning\" text=\"black\" className=\"text-center card card-1\">\n          <Card.Body>\n            <div className=\"card-title\"><Card.Title>Cases </Card.Title></div>\n            <Card.Text >\n              {latest.cases}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n  <small>{lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        </Col>\n\n        <Col >\n        <Card border=\"danger\" text=\"black\" className=\"text-center card card-2\">\n          <Card.Body>\n          <div className=\"card-title\"><Card.Title>Deaths</Card.Title></div>\n            <Card.Text>\n              {latest.deaths}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>{lastUpdated}</small>\n          </Card.Footer>\n        </Card >\n        </Col>\n\n        <Col >\n        <Card border=\"success\" text=\"black\" className=\"text-center card card-3\">\n          <Card.Body>\n          <div className=\"card-title\"><Card.Title>Recovered</Card.Title></div>\n            <Card.Text>\n              {latest.recovered}\n            </Card.Text>\n          </Card.Body>\n          <Card.Footer>\n            <small>{lastUpdated}</small>\n          </Card.Footer>\n        </Card>\n        </Col>\n        </Row>\n      </Container>\n          </CardDeck>\n          \n          <div style={{textAlign: \"center\"}} className=\"dark-theme\">\n            <Toggle\n                  icons={false}\n                  onChange={handleDarkChange} />\n            \n            <span>Dark Theme</span>\n        </div>\n\n    <Form>\n      <Form.Group controlId=\"Search\">\n          <div className=\"search\" id=\"search\">Search Country</div>\n          <div className=\"sub-search\" id=\"search\"><p>Uppercase Required for the first letter (e.g: 'V' for Vietnam)</p></div>\n      <div className=\"input\">\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Search location\"\n          onChange={e => setSearchForCountry(e.target.value)} />\n          </div>\n        <Form.Text className=\"\"></Form.Text>\n      </Form.Group>\n    </Form>\n      <CardColumns className=\"country-info\">{countriesInfected}</CardColumns>\n\n      <div id=\"map\" style={{ height: '100vh', width: '100%' }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: \"AIzaSyCLlYUGFydCC-56n9Lv8LG6h3TkosnmE8M\" }}\n          defaultCenter={{\n            lat:21, lng: 105.8\n          }}\n          defaultZoom={3}\n        >\n          {countriesLocation}\n        </GoogleMapReact>\n          </div>\n          \n          <About id=\"about\" style={{color: darkTheme ? \"whilt\" : \"black\"}}/>\n\n      <div className=\"footer\" style={{color: darkTheme ? \"white\" : \"white\"}}>\n        Copyright Tan D. Duong &copy; 2020\n         \n        <div class=\"icon\">\n            <a href=\"https://twitter.com/TanDDuong1\">\n                <i class=\"fab fa-twitter fa-2x\"></i>\n            </a>\n\n            <a href=\"https://www.facebook.com/tdd1912\">\n                <i class=\"fab fa-facebook fa-2x\"></i>\n            </a>\n\n            <a href=\"https://github.com/tandduong/\">\n                <i class=\"fab fa-github fa-2x\"></i>\n            </a>\n\n            <a href=\"https://www.linkedin.com/in/tan-duong-84a711174/\">\n                <i class=\"fab fa-linkedin-in fa-2x\"></i>\n            </a>\n\n            <a href=\"https://www.instagram.com/tandduong/\">\n                <i class=\"fab fa-instagram fa-2x\"></i>\n            </a>\n                  \n            <a href=\"#nav\">\n                <i class=\"fas fa-arrow-up\"></i>\n            </a>      \n        </div>      \n      </div>\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './component/Home';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    \n        <Home />\n    ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}